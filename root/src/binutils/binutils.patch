diff -urN binutils-2.33.1/bfd/config.bfd binutils-2.33.1-patched/bfd/config.bfd
--- binutils-2.33.1/bfd/config.bfd	2019-09-09 15:19:43.000000000 +0200
+++ binutils-2.33.1-patched/bfd/config.bfd	2019-10-17 09:42:27.659079389 +0200
@@ -718,6 +718,11 @@
     targ_selvecs=i386_elf32_vec
     want64=true
     ;;
+  x86_64-*-qword*)
+    targ_defvec=x86_64_elf64_vec
+    targ_selvecs=i386_elf32_vec
+    want64=true
+    ;;
 #endif
   i[3-7]86-*-lynxos*)
     targ_defvec=i386_elf32_vec
diff -urN binutils-2.33.1/binutils/testsuite/gentestdlls.c binutils-2.33.1-patched/binutils/testsuite/gentestdlls.c
--- binutils-2.33.1/binutils/testsuite/gentestdlls.c	2019-09-09 15:19:43.000000000 +0200
+++ binutils-2.33.1-patched/binutils/testsuite/gentestdlls.c	2019-10-17 09:42:44.463080738 +0200
@@ -25,7 +25,7 @@
    See:
    https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf  */
 
-#include <memory.h>
+//#include <memory.h>
 #include <stdint.h>
 #include <stdio.h>
 #include <stdlib.h>
diff -urN binutils-2.33.1/config.sub binutils-2.33.1-patched/config.sub
--- binutils-2.33.1/config.sub	2019-09-09 15:19:43.000000000 +0200
+++ binutils-2.33.1-patched/config.sub	2019-10-17 09:42:27.659079389 +0200
@@ -1368,7 +1368,7 @@
 	     | powermax* | dnix* | nx6 | nx7 | sei* | dragonfly* \
 	     | skyos* | haiku* | rdos* | toppers* | drops* | es* \
 	     | onefs* | tirtos* | phoenix* | fuchsia* | redox* | bme* \
-	     | midnightbsd* | amdhsa* | unleashed* | emscripten* | wasi*)
+	     | midnightbsd* | amdhsa* | unleashed* | emscripten* | wasi* | qword*)
 	# Remember, each alternative MUST END IN *, to match a version number.
 		;;
 	qnx*)
diff -urN binutils-2.33.1/gas/configure.tgt binutils-2.33.1-patched/gas/configure.tgt
--- binutils-2.33.1/gas/configure.tgt	2019-09-09 15:19:43.000000000 +0200
+++ binutils-2.33.1-patched/gas/configure.tgt	2019-10-17 09:42:27.660079389 +0200
@@ -260,6 +260,8 @@
   i386-*-rdos*)				fmt=elf ;;
   i386-*-darwin*)			fmt=macho ;;
 
+  i386-*-qword*)			fmt=elf ;;
+
   ia16-*-elf*)				fmt=elf ;;
 
   ia64-*-elf*)				fmt=elf ;;
diff -urN binutils-2.33.1/ld/configure.tgt binutils-2.33.1-patched/ld/configure.tgt
--- binutils-2.33.1/ld/configure.tgt	2019-09-09 15:19:44.000000000 +0200
+++ binutils-2.33.1-patched/ld/configure.tgt	2019-10-17 09:42:27.660079389 +0200
@@ -265,6 +265,10 @@
 			targ_extra_emuls=elf_x86_64 ;;
 x86_64-*-redox*)	targ_emul=elf_x86_64
 			targ_extra_emuls=elf_i386 ;;
+x86_64-*-qword*)
+			targ_emul=elf_x86_64
+			targ_extra_emuls=elf_i386
+			;;
 i[3-7]86-*-sysv[45]*)	targ_emul=elf_i386
 			targ_extra_emuls=elf_iamcu ;;
 i[3-7]86-*-solaris2*)	targ_emul=elf_i386_sol2
diff -urN binutils-2.33.1/libctf/ctf-archive.c binutils-2.33.1-patched/libctf/ctf-archive.c
--- binutils-2.33.1/libctf/ctf-archive.c	2019-09-09 15:19:45.000000000 +0200
+++ binutils-2.33.1-patched/libctf/ctf-archive.c	2019-10-17 10:06:48.681475603 +0200
@@ -109,9 +109,9 @@
 
   /* Fill in everything we can, which is everything other than the name
      table offset.  */
-  archdr->ctfa_magic = htole64 (CTFA_MAGIC);
-  archdr->ctfa_nfiles = htole64 (ctf_file_cnt);
-  archdr->ctfa_ctfs = htole64 (ctf_startoffs);
+  archdr->ctfa_magic = CTFA_MAGIC;
+  archdr->ctfa_nfiles = ctf_file_cnt;
+  archdr->ctfa_ctfs = ctf_startoffs;
 
   /* We could validate that all CTF files have the same data model, but
      since any reasonable construction process will be building things of
@@ -122,7 +122,7 @@
      memory.)  */
 
   if (ctf_file_cnt > 0)
-    archdr->ctfa_model = htole64 (ctf_getmodel (ctf_files[0]));
+    archdr->ctfa_model = ctf_getmodel (ctf_files[0]);
 
   /* Now write out the CTFs: ctf_archive_modent array via the mapping,
      ctfs via write().  The names themselves have not been written yet: we
@@ -131,7 +131,7 @@
 
     The name table is not sorted.  */
 
-  for (i = 0, namesz = 0; i < le64toh (archdr->ctfa_nfiles); i++)
+  for (i = 0, namesz = 0; i < archdr->ctfa_nfiles; i++)
     namesz += strlen (names[i]) + 1;
 
   nametbl = malloc (namesz);
@@ -144,7 +144,7 @@
   for (i = 0, namesz = 0,
        modent = (ctf_archive_modent_t *) ((char *) archdr
 					  + sizeof (struct ctf_archive));
-       i < le64toh (archdr->ctfa_nfiles); i++)
+       i < archdr->ctfa_nfiles; i++)
     {
       off_t off;
 
@@ -164,15 +164,15 @@
 	  goto err_free;
 	}
 
-      modent->name_offset = htole64 (namesz);
-      modent->ctf_offset = htole64 (off - ctf_startoffs);
+      modent->name_offset = namesz;
+      modent->ctf_offset = off - ctf_startoffs;
       namesz += strlen (names[i]) + 1;
       modent++;
     }
 
   ctf_qsort_r ((ctf_archive_modent_t *) ((char *) archdr
 					 + sizeof (struct ctf_archive)),
-	       le64toh (archdr->ctfa_nfiles),
+	       archdr->ctfa_nfiles,
 	       sizeof (struct ctf_archive_modent), sort_modent_by_name,
 	       nametbl);
 
@@ -184,7 +184,7 @@
 	"in %s: %s\n";
       goto err_free;
     }
-  archdr->ctfa_names = htole64 (nameoffs);
+  archdr->ctfa_names = nameoffs;
   np = nametbl;
   while (namesz > 0)
     {
@@ -263,7 +263,7 @@
 
   if ((end_off = lseek (fd, 0, SEEK_CUR)) < 0)
     return errno * -1;
-  ctfsz = htole64 (end_off - off);
+  ctfsz = end_off - off;
 
   if ((lseek (fd, off, SEEK_SET)) < 0)
     return errno * -1;
@@ -296,8 +296,8 @@
   const struct ctf_archive_modent *b = two;
   char *nametbl = n;
 
-  return strcmp (&nametbl[le64toh (a->name_offset)],
-		 &nametbl[le64toh (b->name_offset)]);
+  return strcmp (&nametbl[a->name_offset],
+		 &nametbl[b->name_offset]);
 }
 
 /* bsearch() function to search for a given name in the sorted array of struct
@@ -308,7 +308,7 @@
   const char *k = key;
   const struct ctf_archive_modent *v = ent;
 
-  return strcmp (k, &search_nametbl[le64toh (v->name_offset)]);
+  return strcmp (k, &search_nametbl[v->name_offset]);
 }
 
 /* A trivial wrapper: open a CTF archive, from data in a buffer (which the
@@ -319,7 +319,7 @@
 {
   struct ctf_archive *arc = (struct ctf_archive *) buf;
 
-  if (le64toh (arc->ctfa_magic) != CTFA_MAGIC)
+  if (arc->ctfa_magic != CTFA_MAGIC)
     {
       if (errp)
 	*errp = ECTF_FMT;
@@ -356,7 +356,7 @@
       goto err_close;
     }
 
-  if (le64toh (arc->ctfa_magic) != CTFA_MAGIC)
+  if (arc->ctfa_magic != CTFA_MAGIC)
     {
       errmsg = "ctf_arc_open(): Invalid magic number";
       errno = ECTF_FMT;
@@ -428,8 +428,8 @@
   modent = (ctf_archive_modent_t *) ((char *) arc
 				     + sizeof (struct ctf_archive));
 
-  search_nametbl = (char *) arc + le64toh (arc->ctfa_names);
-  modent = bsearch (name, modent, le64toh (arc->ctfa_nfiles),
+  search_nametbl = (char *) arc + arc->ctfa_names;
+  modent = bsearch (name, modent, arc->ctfa_nfiles,
 		    sizeof (struct ctf_archive_modent),
 		    search_modent_by_name);
 
@@ -443,7 +443,7 @@
     }
 
   return ctf_arc_open_by_offset (arc, symsect, strsect,
-				 le64toh (modent->ctf_offset), errp);
+				 modent->ctf_offset, errp);
 }
 
 /* Return the ctf_file_t with the given name, or NULL if none, setting 'err' if
@@ -515,15 +515,15 @@
 
   memset (&ctfsect, 0, sizeof (ctf_sect_t));
 
-  offset += le64toh (arc->ctfa_ctfs);
+  offset += arc->ctfa_ctfs;
 
   ctfsect.cts_name = _CTF_SECTION;
-  ctfsect.cts_size = le64toh (*((uint64_t *) ((char *) arc + offset)));
+  ctfsect.cts_size = *((uint64_t *) ((char *) arc + offset));
   ctfsect.cts_entsize = 1;
   ctfsect.cts_data = (void *) ((char *) arc + offset + sizeof (uint64_t));
   fp = ctf_bufopen (&ctfsect, symsect, strsect, errp);
   if (fp)
-    ctf_setmodel (fp, le64toh (arc->ctfa_model));
+    ctf_setmodel (fp, arc->ctfa_model);
   return fp;
 }
 
@@ -540,19 +540,19 @@
 
   modent = (ctf_archive_modent_t *) ((char *) arc
 				     + sizeof (struct ctf_archive));
-  nametbl = (((const char *) arc) + le64toh (arc->ctfa_names));
+  nametbl = (((const char *) arc) + arc->ctfa_names);
 
-  for (i = 0; i < le64toh (arc->ctfa_nfiles); i++)
+  for (i = 0; i < arc->ctfa_nfiles; i++)
     {
       const char *name;
       char *fp;
 
-      name = &nametbl[le64toh (modent[i].name_offset)];
-      fp = ((char *) arc + le64toh (arc->ctfa_ctfs)
-	    + le64toh (modent[i].ctf_offset));
+      name = &nametbl[modent[i].name_offset];
+      fp = ((char *) arc + arc->ctfa_ctfs
+	    + modent[i].ctf_offset);
 
       if ((rc = func (name, (void *) (fp + sizeof (uint64_t)),
-		      le64toh (*((uint64_t *) fp)), data)) != 0)
+		      *((uint64_t *) fp), data)) != 0)
 	return rc;
     }
   return 0;
@@ -588,13 +588,13 @@
 
   modent = (ctf_archive_modent_t *) ((char *) arc
 				     + sizeof (struct ctf_archive));
-  nametbl = (((const char *) arc) + le64toh (arc->ctfa_names));
+  nametbl = (((const char *) arc) + arc->ctfa_names);
 
-  for (i = 0; i < le64toh (arc->ctfa_nfiles); i++)
+  for (i = 0; i < arc->ctfa_nfiles; i++)
     {
       const char *name;
 
-      name = &nametbl[le64toh (modent[i].name_offset)];
+      name = &nametbl[modent[i].name_offset];
       if ((f = ctf_arc_open_by_name_internal (arc, symsect, strsect,
 					      name, &rc)) == NULL)
 	return rc;
diff -urN binutils-2.33.1/libctf/ctf-open-bfd.c binutils-2.33.1-patched/libctf/ctf-open-bfd.c
--- binutils-2.33.1/libctf/ctf-open-bfd.c	2019-09-09 15:19:45.000000000 +0200
+++ binutils-2.33.1-patched/libctf/ctf-open-bfd.c	2019-10-18 13:10:20.855447975 +0200
@@ -275,7 +275,7 @@
   if ((nbytes = ctf_pread (fd, &arc_magic, sizeof (arc_magic), 0)) <= 0)
     return (ctf_set_open_errno (errp, nbytes < 0 ? errno : ECTF_FMT));
 
-  if ((size_t) nbytes >= sizeof (uint64_t) && le64toh (arc_magic) == CTFA_MAGIC)
+  if ((size_t) nbytes >= sizeof (uint64_t) && arc_magic == CTFA_MAGIC)
     {
       struct ctf_archive *arc;
 
